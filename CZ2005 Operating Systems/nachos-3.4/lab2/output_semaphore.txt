ubuntu@ubuntu:~/Desktop/nachos-3.4/lab2$ make
>>> Building dependency file for  threadtest.cc <<<
>>> Compiling threadtest.cc <<<
g++ -m32 -g -Wall -Wshadow -I../threads -I../machine -I ../userprog -I../filesys -I../vm -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/intel-i386-linux/objects/threadtest.o threadtest.cc
threadtest.cc: In function ‘void TestValueOne()’:
threadtest.cc:76:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it1 = new Thread("Inc_v1_1");
                                     ^
threadtest.cc:77:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it2 = new Thread("Inc_v1_2");
                                     ^
threadtest.cc:78:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt1 = new Thread("Dec_v1_1");
                                     ^
threadtest.cc:79:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt2 = new Thread("Dec_v1_2");
                                     ^
threadtest.cc: In function ‘void TestValueMinusOne()’:
threadtest.cc:129:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it1 = new Thread("Inc_v2_1");
                                     ^
threadtest.cc:130:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it2 = new Thread("Inc_v2_2");
                                     ^
threadtest.cc:131:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt1 = new Thread("Dec_v2_1");
                                     ^
threadtest.cc:132:37: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt2 = new Thread("Dec_v2_2");
                                     ^
threadtest.cc: At global scope:
threadtest.cc:158:55: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
 Semaphore *s = new Semaphore("Semaphore_Consistent", 1);
                                                       ^
threadtest.cc: In function ‘void TestConsistency()’:
threadtest.cc:215:45: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it1 = new Thread("Inc_Consistent_1");
                                             ^
threadtest.cc:216:45: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *it2 = new Thread("Inc_Consistent_2");
                                             ^
threadtest.cc:217:45: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt1 = new Thread("Dec_Consistent_1");
                                             ^
threadtest.cc:218:45: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  Thread *dt2 = new Thread("Dec_Consistent_2");
                                             ^
threadtest.cc: In function ‘void ThreadTest()’:
threadtest.cc:242:9: warning: unused variable ‘loopTimes’ [-Wunused-variable]
     int loopTimes=0;
         ^~~~~~~~~
>>> Linking arch/intel-i386-linux/bin/nachos <<<
g++ arch/intel-i386-linux/objects/main.o arch/intel-i386-linux/objects/list.o arch/intel-i386-linux/objects/scheduler.o arch/intel-i386-linux/objects/synch.o arch/intel-i386-linux/objects/synchlist.o arch/intel-i386-linux/objects/system.o arch/intel-i386-linux/objects/thread.o arch/intel-i386-linux/objects/threadtest.o arch/intel-i386-linux/objects/utility.o arch/intel-i386-linux/objects/interrupt.o arch/intel-i386-linux/objects/sysdep.o arch/intel-i386-linux/objects/stats.o arch/intel-i386-linux/objects/timer.o arch/intel-i386-linux/objects/ipt.o arch/intel-i386-linux/objects/switch-linux.o -m32 -o arch/intel-i386-linux/bin/nachos
ln -sf arch/intel-i386-linux/bin/nachos nachos
ubuntu@ubuntu:~/Desktop/nachos-3.4/lab2$ ./nachos -d
	interrupts: off -> on

== Tick 10 ==
	interrupts: on -> off
Time: 10, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Entering SimpleTestenter TestValueOne, value=0...
Forking thread Dec_v1_1 #0 with func=0x565b0ede, arg=3, join=NO
	interrupts: on -> off
Putting thread Dec_v1_1 #0 on ready list.
	interrupts: off -> on

== Tick 20 ==
	interrupts: on -> off
Time: 20, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Dec_v1_2 #0 with func=0x565b0ede, arg=4, join=NO
	interrupts: on -> off
Putting thread Dec_v1_2 #0 on ready list.
	interrupts: off -> on

== Tick 30 ==
	interrupts: on -> off
Time: 30, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Inc_v1_1 #0 with func=0x565b0e80, arg=1, join=NO
	interrupts: on -> off
Putting thread Inc_v1_1 #0 on ready list.
	interrupts: off -> on

== Tick 40 ==
	interrupts: on -> off
Time: 40, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Inc_v1_2 #0 with func=0x565b0e80, arg=2, join=YES
	interrupts: on -> off
Putting thread Inc_v1_2 #0 on ready list.
	interrupts: off -> on

== Tick 50 ==
	interrupts: on -> off
Time: 50, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Inc_v1_2 #0
In JoinHit for Thread Inc_v1_2 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 60 ==
	interrupts: on -> off
Time: 60, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Dec_v1_1 #0
	interrupts: off -> on

== Tick 70 ==
	interrupts: on -> off
Time: 70, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_v1_1 #0
Putting thread Dec_v1_1 #0 on ready list.
Switching from thread Dec_v1_1 #0 to thread Dec_v1_2 #0
	interrupts: off -> on

== Tick 80 ==
	interrupts: on -> off
Time: 80, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_v1_2 #0
Putting thread Dec_v1_2 #0 on ready list.
Switching from thread Dec_v1_2 #0 to thread Inc_v1_1 #0
	interrupts: off -> on

== Tick 90 ==
	interrupts: on -> off
Time: 90, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_v1_1 #0
Putting thread Inc_v1_1 #0 on ready list.
Switching from thread Inc_v1_1 #0 to thread Inc_v1_2 #0
	interrupts: off -> on

== Tick 100 ==
	interrupts: on -> off
Time: 100, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_v1_2 #0
Putting thread Inc_v1_2 #0 on ready list.
Switching from thread Inc_v1_2 #0 to thread Dec_v1_1 #0
Now in thread Dec_v1_1 #0
	interrupts: off -> on

== Tick 110 ==
	interrupts: on -> off
Time: 110, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 3 new value -1
	interrupts: on -> off
Finishing thread Dec_v1_1 #0
Sleeping thread Dec_v1_1 #0
Switching from thread Dec_v1_1 #0 to thread Dec_v1_2 #0
Now in thread Dec_v1_2 #0
Deleting thread Dec_v1_1 #0
	interrupts: off -> on

== Tick 120 ==
	interrupts: on -> off
Time: 120, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 4 new value -1
	interrupts: on -> off
Finishing thread Dec_v1_2 #0
Sleeping thread Dec_v1_2 #0
Switching from thread Dec_v1_2 #0 to thread Inc_v1_1 #0
Now in thread Inc_v1_1 #0
Deleting thread Dec_v1_2 #0
	interrupts: off -> on

== Tick 130 ==
	interrupts: on -> off
Time: 130, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 1 new value 1
	interrupts: on -> off
Finishing thread Inc_v1_1 #0
Sleeping thread Inc_v1_1 #0
Switching from thread Inc_v1_1 #0 to thread Inc_v1_2 #0
Now in thread Inc_v1_2 #0
Deleting thread Inc_v1_1 #0
	interrupts: off -> on

== Tick 140 ==
	interrupts: on -> off
Time: 140, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 2 new value 1
Thread Inc_v1_2 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Inc_v1_2 acquires semaphore Join?
	interrupts: off -> on

== Tick 150 ==
	interrupts: on -> off
Time: 150, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Inc_v1_2 releases semaphore in_join
	interrupts: off -> on

== Tick 160 ==
	interrupts: on -> off
Time: 160, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Inc_v1_2 #0
Sleeping thread Inc_v1_2 #0
Switching from thread Inc_v1_2 #0 to thread main #0
Now in thread main #0
Deleting thread Inc_v1_2 #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 170 ==
	interrupts: on -> off
Time: 170, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
congratulations! passed.
enter TestValueMinusOne, value=0...
Forking thread Inc_v2_1 #0 with func=0x565b0e80, arg=1, join=NO
	interrupts: on -> off
Putting thread Inc_v2_1 #0 on ready list.
	interrupts: off -> on

== Tick 180 ==
	interrupts: on -> off
Time: 180, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Inc_v2_2 #0 with func=0x565b0e80, arg=2, join=NO
	interrupts: on -> off
Putting thread Inc_v2_2 #0 on ready list.
	interrupts: off -> on

== Tick 190 ==
	interrupts: on -> off
Time: 190, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Dec_v2_1 #0 with func=0x565b0ede, arg=3, join=NO
	interrupts: on -> off
Putting thread Dec_v2_1 #0 on ready list.
	interrupts: off -> on

== Tick 200 ==
	interrupts: on -> off
Time: 200, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Dec_v2_2 #0 with func=0x565b0ede, arg=4, join=YES
	interrupts: on -> off
Putting thread Dec_v2_2 #0 on ready list.
	interrupts: off -> on

== Tick 210 ==
	interrupts: on -> off
Time: 210, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Dec_v2_2 #0
In JoinHit for Thread Dec_v2_2 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 220 ==
	interrupts: on -> off
Time: 220, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Inc_v2_1 #0
	interrupts: off -> on

== Tick 230 ==
	interrupts: on -> off
Time: 230, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_v2_1 #0
Putting thread Inc_v2_1 #0 on ready list.
Switching from thread Inc_v2_1 #0 to thread Inc_v2_2 #0
	interrupts: off -> on

== Tick 240 ==
	interrupts: on -> off
Time: 240, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_v2_2 #0
Putting thread Inc_v2_2 #0 on ready list.
Switching from thread Inc_v2_2 #0 to thread Dec_v2_1 #0
	interrupts: off -> on

== Tick 250 ==
	interrupts: on -> off
Time: 250, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_v2_1 #0
Putting thread Dec_v2_1 #0 on ready list.
Switching from thread Dec_v2_1 #0 to thread Dec_v2_2 #0
	interrupts: off -> on

== Tick 260 ==
	interrupts: on -> off
Time: 260, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_v2_2 #0
Putting thread Dec_v2_2 #0 on ready list.
Switching from thread Dec_v2_2 #0 to thread Inc_v2_1 #0
Now in thread Inc_v2_1 #0
	interrupts: off -> on

== Tick 270 ==
	interrupts: on -> off
Time: 270, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 1 new value 1
	interrupts: on -> off
Finishing thread Inc_v2_1 #0
Sleeping thread Inc_v2_1 #0
Switching from thread Inc_v2_1 #0 to thread Inc_v2_2 #0
Now in thread Inc_v2_2 #0
Deleting thread Inc_v2_1 #0
	interrupts: off -> on

== Tick 280 ==
	interrupts: on -> off
Time: 280, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 2 new value 1
	interrupts: on -> off
Finishing thread Inc_v2_2 #0
Sleeping thread Inc_v2_2 #0
Switching from thread Inc_v2_2 #0 to thread Dec_v2_1 #0
Now in thread Dec_v2_1 #0
Deleting thread Inc_v2_2 #0
	interrupts: off -> on

== Tick 290 ==
	interrupts: on -> off
Time: 290, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 3 new value -1
	interrupts: on -> off
Finishing thread Dec_v2_1 #0
Sleeping thread Dec_v2_1 #0
Switching from thread Dec_v2_1 #0 to thread Dec_v2_2 #0
Now in thread Dec_v2_2 #0
Deleting thread Dec_v2_1 #0
	interrupts: off -> on

== Tick 300 ==
	interrupts: on -> off
Time: 300, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 4 new value -1
Thread Dec_v2_2 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Dec_v2_2 acquires semaphore Join?
	interrupts: off -> on

== Tick 310 ==
	interrupts: on -> off
Time: 310, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Dec_v2_2 releases semaphore in_join
	interrupts: off -> on

== Tick 320 ==
	interrupts: on -> off
Time: 320, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Dec_v2_2 #0
Sleeping thread Dec_v2_2 #0
Switching from thread Dec_v2_2 #0 to thread main #0
Now in thread main #0
Deleting thread Dec_v2_2 #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 330 ==
	interrupts: on -> off
Time: 330, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
congratulations! passed.
enter TestConsistency, value=0...
Forking thread Inc_Consistent_1 #0 with func=0x565b1444, arg=1, join=YES
	interrupts: on -> off
Putting thread Inc_Consistent_1 #0 on ready list.
	interrupts: off -> on

== Tick 340 ==
	interrupts: on -> off
Time: 340, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Inc_Consistent_2 #0 with func=0x565b1444, arg=2, join=YES
	interrupts: on -> off
Putting thread Inc_Consistent_2 #0 on ready list.
	interrupts: off -> on

== Tick 350 ==
	interrupts: on -> off
Time: 350, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Dec_Consistent_1 #0 with func=0x565b14c6, arg=3, join=YES
	interrupts: on -> off
Putting thread Dec_Consistent_1 #0 on ready list.
	interrupts: off -> on

== Tick 360 ==
	interrupts: on -> off
Time: 360, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Forking thread Dec_Consistent_2 #0 with func=0x565b14c6, arg=4, join=YES
	interrupts: on -> off
Putting thread Dec_Consistent_2 #0 on ready list.
	interrupts: off -> on

== Tick 370 ==
	interrupts: on -> off
Time: 370, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Inc_Consistent_1 #0
In JoinHit for Thread Inc_Consistent_1 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 380 ==
	interrupts: on -> off
Time: 380, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Inc_Consistent_1 #0
	interrupts: off -> on

== Tick 390 ==
	interrupts: on -> off
Time: 390, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
thread Inc_Consistent_1 acquires semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 400 ==
	interrupts: on -> off
Time: 400, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_Consistent_1 #0
Putting thread Inc_Consistent_1 #0 on ready list.
Switching from thread Inc_Consistent_1 #0 to thread Inc_Consistent_2 #0
	interrupts: off -> on

== Tick 410 ==
	interrupts: on -> off
Time: 410, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread Inc_Consistent_2 #0
Switching from thread Inc_Consistent_2 #0 to thread Dec_Consistent_1 #0
	interrupts: off -> on

== Tick 420 ==
	interrupts: on -> off
Time: 420, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread Dec_Consistent_1 #0
Switching from thread Dec_Consistent_1 #0 to thread Dec_Consistent_2 #0
	interrupts: off -> on

== Tick 430 ==
	interrupts: on -> off
Time: 430, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread Dec_Consistent_2 #0
Switching from thread Dec_Consistent_2 #0 to thread Inc_Consistent_1 #0
Now in thread Inc_Consistent_1 #0
	interrupts: off -> on

== Tick 440 ==
	interrupts: on -> off
Time: 440, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 1 new value 1
	interrupts: on -> off
Putting thread Inc_Consistent_2 #0 on ready list.
thread Inc_Consistent_1 releases semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 450 ==
	interrupts: on -> off
Time: 450, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread Inc_Consistent_1 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Inc_Consistent_1 acquires semaphore Join?
	interrupts: off -> on

== Tick 460 ==
	interrupts: on -> off
Time: 460, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Inc_Consistent_1 releases semaphore in_join
	interrupts: off -> on

== Tick 470 ==
	interrupts: on -> off
Time: 470, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Inc_Consistent_1 #0
Sleeping thread Inc_Consistent_1 #0
Switching from thread Inc_Consistent_1 #0 to thread Inc_Consistent_2 #0
Now in thread Inc_Consistent_2 #0
Deleting thread Inc_Consistent_1 #0
thread Inc_Consistent_2 acquires semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 480 ==
	interrupts: on -> off
Time: 480, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Inc_Consistent_2 #0
Putting thread Inc_Consistent_2 #0 on ready list.
Switching from thread Inc_Consistent_2 #0 to thread main #0
Now in thread main #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 490 ==
	interrupts: on -> off
Time: 490, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Inc_Consistent_2 #0
In JoinHit for Thread Inc_Consistent_2 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 500 ==
	interrupts: on -> off
Time: 500, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Inc_Consistent_2 #0
Now in thread Inc_Consistent_2 #0
	interrupts: off -> on

== Tick 510 ==
	interrupts: on -> off
Time: 510, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Inc thread 2 new value 2
	interrupts: on -> off
Putting thread Dec_Consistent_1 #0 on ready list.
thread Inc_Consistent_2 releases semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 520 ==
	interrupts: on -> off
Time: 520, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread Inc_Consistent_2 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Inc_Consistent_2 acquires semaphore Join?
	interrupts: off -> on

== Tick 530 ==
	interrupts: on -> off
Time: 530, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Inc_Consistent_2 releases semaphore in_join
	interrupts: off -> on

== Tick 540 ==
	interrupts: on -> off
Time: 540, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Inc_Consistent_2 #0
Sleeping thread Inc_Consistent_2 #0
Switching from thread Inc_Consistent_2 #0 to thread Dec_Consistent_1 #0
Now in thread Dec_Consistent_1 #0
Deleting thread Inc_Consistent_2 #0
thread Dec_Consistent_1 acquires semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 550 ==
	interrupts: on -> off
Time: 550, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_Consistent_1 #0
Putting thread Dec_Consistent_1 #0 on ready list.
Switching from thread Dec_Consistent_1 #0 to thread main #0
Now in thread main #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 560 ==
	interrupts: on -> off
Time: 560, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Dec_Consistent_1 #0
In JoinHit for Thread Dec_Consistent_1 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 570 ==
	interrupts: on -> off
Time: 570, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Dec_Consistent_1 #0
Now in thread Dec_Consistent_1 #0
	interrupts: off -> on

== Tick 580 ==
	interrupts: on -> off
Time: 580, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 3 new value 1
	interrupts: on -> off
Putting thread Dec_Consistent_2 #0 on ready list.
thread Dec_Consistent_1 releases semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 590 ==
	interrupts: on -> off
Time: 590, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread Dec_Consistent_1 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Dec_Consistent_1 acquires semaphore Join?
	interrupts: off -> on

== Tick 600 ==
	interrupts: on -> off
Time: 600, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Dec_Consistent_1 releases semaphore in_join
	interrupts: off -> on

== Tick 610 ==
	interrupts: on -> off
Time: 610, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Dec_Consistent_1 #0
Sleeping thread Dec_Consistent_1 #0
Switching from thread Dec_Consistent_1 #0 to thread Dec_Consistent_2 #0
Now in thread Dec_Consistent_2 #0
Deleting thread Dec_Consistent_1 #0
thread Dec_Consistent_2 acquires semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 620 ==
	interrupts: on -> off
Time: 620, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Yielding thread Dec_Consistent_2 #0
Putting thread Dec_Consistent_2 #0 on ready list.
Switching from thread Dec_Consistent_2 #0 to thread main #0
Now in thread main #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 630 ==
	interrupts: on -> off
Time: 630, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread main #0 is calling join on thread Dec_Consistent_2 #0
In JoinHit for Thread Dec_Consistent_2 #0.
	interrupts: on -> off
thread main releases semaphore Join?
	interrupts: off -> on

== Tick 640 ==
	interrupts: on -> off
Time: 640, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Sleeping thread main #0
Switching from thread main #0 to thread Dec_Consistent_2 #0
Now in thread Dec_Consistent_2 #0
	interrupts: off -> on

== Tick 650 ==
	interrupts: on -> off
Time: 650, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
**** Dec thread 4 new value 0
	interrupts: on -> off
thread Dec_Consistent_2 releases semaphore Semaphore_Consistent
	interrupts: off -> on

== Tick 660 ==
	interrupts: on -> off
Time: 660, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
Thread Dec_Consistent_2 #0 is here to revive the thread that called it
	interrupts: on -> off
thread Dec_Consistent_2 acquires semaphore Join?
	interrupts: off -> on

== Tick 670 ==
	interrupts: on -> off
Time: 670, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Putting thread main #0 on ready list.
thread Dec_Consistent_2 releases semaphore in_join
	interrupts: off -> on

== Tick 680 ==
	interrupts: on -> off
Time: 680, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
	interrupts: on -> off
Finishing thread Dec_Consistent_2 #0
Sleeping thread Dec_Consistent_2 #0
Switching from thread Dec_Consistent_2 #0 to thread main #0
Now in thread main #0
Deleting thread Dec_Consistent_2 #0
thread main acquires semaphore in_join
	interrupts: off -> on

== Tick 690 ==
	interrupts: on -> off
Time: 690, interrupts off
Pending interrupts:
End of pending interrupts
	interrupts: off -> on
congratulations! passed.
	interrupts: on -> off
Finishing thread main #0
Sleeping thread main #0
Machine idling; checking for interrupts.
Time: 690, interrupts off
Pending interrupts:
End of pending interrupts
Machine idle.  No interrupts to do.
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

Ticks: total 690, idle 0, system 690, user 0
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0, outs 0, tlb miss: 0
Network I/O: packets received 0, sent 0

Cleaning up...
